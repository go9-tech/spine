openapi: 3.0.1
info:
  title: "[[${title}]]"
  description: "[[${description}]]"
  version: "[[${version}]]"
servers:
- url: "[[${serverUrl}]]"
security:
- openIdConnect:
  - "${openIdConnectScope}"
paths:
  /infomais/api/v1/parties/{partyReference}:
    get:
      tags:
      - Party
      summary: Retrieve Party
      operationId: RetrieveParty
      parameters:
      - name: partyReference
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: forceRefresh
        in: query
        required: false
        schema:
          type: boolean
      - name: $expand
        in: query
        description: Expand expression
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Retrieve Party Response Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Party'
        "400":
          description: The request is invallid.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "401":
          description: Request unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "403":
          description: Request forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "404":
          description: Not data found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "${retrievePartyUri}"
  /relato/api/v1/reports/{relatoReportReference}:
    get:
      tags:
      - Relato Report
      summary: Retrieve Relato Report
      operationId: RetrieveRelatoReport
      parameters:
      - name: relatoReportReference
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: forceRefresh
        in: query
        required: false
        schema:
          type: boolean
      - name: $expand
        in: query
        description: Expand expression
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Retrieve Relato Report Response Message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelatoReport'
        "400":
          description: The request is invallid.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "401":
          description: Request unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "403":
          description: Request forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "404":
          description: Not data found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
        "500":
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorMessage'
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "${retrieveRelatoReportUri}"
components:
  schemas:
    Party:
      properties:
        id:
          type: integer
          description: Primary key of the object
          format: int64
        createdBy:
          type: string
          description: The user that created the object
        createdDate:
          type: string
          description: The date that the object has been created
          format: date-time
        lastModifiedBy:
          type: string
          description: The user that updated the object
        lastModifiedDate:
          type: string
          description: The date that the object has been updated
          format: date-time
        reference:
          type: string
          format: uuid
        person: {}
        organization: {}
        type:
          type: string
          enum:
          - PERSON
          - ORGANIZATION
    RelatoReport:
      properties:
        id:
          type: integer
          description: Primary key of the object
          format: int64
        createdBy:
          type: string
          description: The user that created the object
        createdDate:
          type: string
          description: The date that the object has been created
          format: date-time
        lastModifiedBy:
          type: string
          description: The user that updated the object
        lastModifiedDate:
          type: string
          description: The date that the object has been updated
          format: date-time
        reference:
          type: string
          format: uuid
        contentType:
          type: string
        payload: {}
    Error:
      type: object
      properties:
        code:
          type: string
        title:
          type: string
        detail:
          type: string
  responses:
    ErrorMessage:
      description: Error Message.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              status:
                type: integer
                format: int32
              instant:
                type: string
                format: date-time
              duration:
                type: string
                format: date-time
              content:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  requestBodies: {}
  securitySchemes:
    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: "${openIdConnectUrl}"
      x-amazon-apigateway-authorizer:
        identitySource: $request.header.Authorization
        jwtConfiguration:
          issuer: "${openIdConnectIssuer}"
        type: jwt
